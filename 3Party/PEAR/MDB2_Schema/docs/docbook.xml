<!--
License: http://creativecommons.org/licenses/by-sa/2.0/
-->

<!DOCTYPE book
  PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<book>

  <bookinfo>
	<date>2007-04-28</date>
    <title>MDB2_Schema</title>
    <subtitle></subtitle>
    <authorgroup>
      <author>
      </author>
        <firstname>Igor</firstname>
        <surname>Feghali</surname>
      <author>
        <firstname>Lars</firstname>
        <surname>Olesen</surname>
      </author>
    </authorgroup>
    <copyright>
      <year>2007</year>
      <holder>The authors</holder>
    </copyright>
    <legalnotice></legalnotice>
    <abstract>
      <para>
        Describes how to use PEAR's MDB2_Schema
      </para>
    </abstract>

  </bookinfo>
  <toc></toc>

  <!--
  <preface id="preface">
    <title>Preface</title>
    <para>
      This tutorial describes how to use PHPMailer and explains the use of the class functions.
    </para>
  </preface>
  -->

  <chapter id="introduction">
    <title>Introduction</title>
    <para>
      MDB2_Schema builds upon MDB2 to provide tools to manage your database schema using XML which is both platform- and database-independent.
    </para>

    <para>
      The XML format is inherited from the Metabase package. You can find a detailed description of the Metabase format at http://cvs.php.net/viewvc.cgi/pear/MDB2_Schema/docs/xml_schema_documentation.html?revision=1.9
    </para>

  </chapter>

  <chapter id="installation">

    <title>Installation and instantiation</title>
    <para>
      MDB2_Schema is a separate package, and can be installed using the PEAR installer:
    </para>
    <para>
      <programlisting><![CDATA[
$ pear install MDB2_Schema
        ]]></programlisting>
    </para>
    <para>
      To create an instance of the MDB2_Schema class you can use the <methodname>factory()</methodname>, which accepts a <varname>$dsn</varname> or an array. The factory method also accepts an existing MDB2 object. In the example below, we will just use a <varname>$dsn</varname>.
    </para>
    <para>
      <programlisting><![CDATA[
<?php
require_once 'MDB2/Schema.php';

$dsn = 'msyql://root:@localhost/test';
$options = array('debug' => false);

$schema = MDB2_Schema::factory($dsn, $options);
?>
        ]]></programlisting>
    </para>
  </chapter>

  <chapter id="dump-a-database">

    <title>Dump a database to Metabase XML</title>
    <para>
      You can use <methodname>dumpDatabase()</methodname> to copy your database to a file written in the Metabase XML format. <methodname>dumpDatabase()</methodname> accepts a database definition array, for instance:
    </para>
    <para>
      <programlisting><![CDATA[
<?php
require 'MDB2/Schema.php';

$definition = array(
    'name' => 'test',
    'create' => 1,
    'overwrite' => 0, // alter existing tables
    'tables' => array(
        'test' => array(
            'fields' => array(
                'id'   => array(
                    'type'     => 'integer',
                    'notnull'  => 1,
                    'length'   => 6,
                    'unsigned' => 1,
                    'default'  => 0
                ),
                'name' => array(
                    'type'     => 'text',
                    'length'   => 255,
                    'default'  => 'None'
                ),
                'comment' => array(
                    'type'     => 'text'
                )
            )
        )
    )
);

$dsn = 'mysql://root:@localhost/test';
$options = array(
    'output_mode' => 'file',
    'output' => 'schema.xml'
);

$options = array(
    'force_defaults' => false
);

$schema = MDB2_Schema::factory($dsn, $options);
$schema->dumpDatabase($definition, $options, MDB2_SCHEMA_DUMP_STRUCTURE);
?>
        ]]></programlisting>
    </para>
    <para>
      The first parameter is just the database definition array. The second parameter is the options where we choose to output to a file. The third option tells <methodname>dumpDatabase()</methodname> what to be dumped - either the structure, the data in the tables, or both. This is defined using constants (MDB2_SCHEMA_DUMP_STRUCTURE, MDB2_SCHEMA_DUMP_CONTENT, MDB2_SCHEMA_DUMP_ALL).
    </para>
    <para>
      Please notice that <varname>$options['force_defaults']</varname> is set to false. By default it is set to true in MDB2_Schema, but when you want to create a field with the type text, it need to be set to false. The reason being, that some databases don't accept a text field with a default value.
    </para>
    <para>
      This code sample creates schema.xml containing the following:
    </para>
    <para>
      <programlisting><![CDATA[
<?xml version="1.0" encoding="ISO-8859-1" ?>
<database>

 <name>test</name>
 <create>true</create>
 <overwrite>false</overwrite>

 <table>

  <name>test</name>

  <declaration>

   <field>
    <name>id</name>
    <type>integer</type>
    <unsigned>true</unsigned>
    <length>6</length>
    <notnull>true</notnull>
    <default>0</default>
   </field>

   <field>
    <name>name</name>
    <type>text</type>
    <length>255</length>
    <notnull>false</notnull>
    <default>None</default>
   </field>

   <field>
    <name>comment</name>
    <type>text</type>
    <notnull>false</notnull>
   </field>

  </declaration>

 </table>

</database>
        ]]></programlisting>
    </para>
  </chapter>

  <chapter id="create-and-update-database">
    <title>Create and update database</title>

    <section id="create-database">
      <title>Create database</title>
      <para>
        When having a Metabase XML file, it is a breeze to create a database. Simply do the following:
      </para>
      <para>
      <programlisting><![CDATA[
<?php
require_once 'MDB2/Schema.php';

$dsn = 'msyql://root:@localhost/test';
$options = array(
    'debug' => true,
    'force_defaults' => false
);

$variables = array(
    'database'  => 'test',
    'create'    => true,
    'overwrite' => false
);

// first run with queries disabled to make sure everything is allright
$disable_query = true;

$schema = MDB2_Schema::factory($dsn, $options, $disable_query);
$schema->createDatabase('schema.xml', $variables, $disable_query);
?>
        ]]></programlisting>
      </para>
    </section>

    <section id="getting-defintion-from-existing-database">
      <title>Getting the definition from an existing database</title>
      <para>
        You can use <methodname>getDefinitionFromDatabase()</methodname> to get the definition array from an existing database.
      </para>
      <para>
        <programlisting><![CDATA[
<?php
require_once 'MDB2/Schema.php';

$dsn = 'msyql://root:@localhost/test';

// this method _attempts_ to get the defintition from the database
// make sure you have tested it with your database to see if it
// returns what you expect
$previous_schema = $this->getDefinitionFromDatabase();
?>
        ]]></programlisting>
      </para>
      <para>
        This should return an array matching the <varname>$definition</varname>. Though you have to use the method with caution, if you use the method on a database created by hand. Some of the fields might be slightly different, but once you create your database using MDB2_Schema it is reliable and will return the same <varname>$definition</varname> every time.
      </para>
    </section>

    <section id="update-database">
      <title>Update database</title>
      <para>
        Having MDB2_Schema to update your database, when your Metabase XML schema changes is also really easy. You can use the <methodname>getDefinitionFromDatabase()</methodname> method to determine the previous database schema, and then just use <methodname>updateDatabase()</methodname> to do the actual update. However, you have to make sure, that <methodname>getDefinitionFromDatabase</methodname> returns what you expect before you use it.
      </para>
      <para>
        <programlisting><![CDATA[
<?php
require_once 'MDB2/Schema.php';

$dsn = 'msyql://root:@localhost/test';
$options = array(
    'debug' => true,
    'force_defaults' => false
);

$variables = array(
    'database'  => 'test',
    'create'    => true,
    'overwrite' => false
);

// first run with queries disabled to make sure everything is allright
$disable_query = true;

// this method _attempts_ to get the defintition from the database
// make sure you have tested it with your database to see if it
// returns what you expect
$previous_schema = $this->getDefinitionFromDatabase();

$schema = MDB2_Schema::factory($dsn, $options, $disable_query);
$schema->updateDatabase('schema.xml', $previous_schema, $variables, $disable_query);
?>
        ]]></programlisting>
      </para>

    </section>
  </chapter>


  <chapter id="references">
    <title>Other references</title>
    <para>
      Schema documentation: http://cvs.php.net/viewvc.cgi/pear/MDB2_Schema/docs/xml_schema_documentation.html?revision=1.9
    </para>

  </chapter>

</book>