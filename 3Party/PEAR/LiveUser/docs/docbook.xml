<!DOCTYPE book
  PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<book>

  <bookinfo>
    <date>2007-04-28</date>
    <title>LiveUser</title>
    <subtitle></subtitle>
    <authorgroup>
      <author>
        <firstname>Lars</firstname>
        <surname>Olesen</surname>
      </author>
    </authorgroup>
    <copyright>
      <year>2007</year>
      <holder>The authors</holder>
    </copyright>
    <legalnotice></legalnotice>
    <abstract>
      <para>
        Describes how to use PEAR's LiveUser library
      </para>
    </abstract>

  </bookinfo>
  <toc></toc>

  <!--
  <preface id="preface">
    <title>Preface</title>
    <para>
    </para>
  </preface>
  -->

  <chapter id="introduction">
    <title>Introduction</title>

    <para>
      LiveUser is an advanced authentication and permission framework that comes with a large array of out of the box features which can be used optionally. The base class is called LiveUser and is often refered to as the "client" and is what will be commonly be used to authenticate a specific user and then optionally make permission checks on this user.
    </para>

    <para>
      LiveUser provides the following key features: The LiveUser class takes care of the login process and can be configured to use a certain permission container and one or more different auth containers. That means, you can have your users' data scattered amongst many data containers and have the LiveUser class try each defined container until the user is found. For example, you can have all website users who can apply for a new account online on the webserver's local database. Also, you want to enable all your company's employees to login to the site without the need to create new accounts for all of them. To achieve that, a second container can be defined to be used by the LiveUser class.
    </para>

    <para>
      You can also define a permission container of your choice that will manage the rights for each user. Depending on the container, you can implement any kind of permission schemes for your application while having one consistent API.
    </para>

    <para>
      Using different permission and auth containers, it's easily possible to integrate newly written applications with older ones that have their own ways of storing permissions and user data. Just make a new container type and you're ready to go!
    </para>

    <para>
      Currently available are containers using: PEAR::DB, PEAR::MDB, PEAR::MDB2, ext/PDO, PEAR::XML_Tree, Session and PEAR::Auth.
    </para>

    <para>
      At this point LiveUser is still in beta stage, and is not currently being developed. However, it is maintained for bugfixes. Even so LiveUser is already being used on a wide range of production websites.
    </para>

  </chapter>

  <chapter id="setting-up">

    <title>Setting up LiveUser</title>

    <para>
      Before you can use LiveUser you will need to setup the necessary data structures for the chosen container. Through the use of the configuration options it is possible to customize a lot of the aspects of the storage layer. Most notably it is possible to alias field and table names. This should make it possible to integrate any legacy data into LiveUser.
    </para>

    <section id="setting-up-the-database">
      <title>Setting up the database</title>

      <para>
        This chapter explains how to setup the database using the database schema installer enclosed in the package. The installer requires the MDB2_Schema and MDB2 packages and is able to handle most configuration options properly to be able to install the database schema directly into your database. You can find the install class in "[PEAR]/data/misc/schema/install.php". There is some sample code which is partially commented out at the top. Basically its a two step process for both the auth and perm: (1) generate the schema xml file, (2) install the schema.
      </para>

      <para>
        You can find a sketch of the database schema on http://www.backendmedia.com/LiveUser/liveuser_db_schema.png
      </para>


      <para>
        The diagram details what tables are needed for what permission complexity level. If you want to prevent the installer from installing tables you dont need you can modify the "tables" property of the instance of the permission container you pass to the generateSchema() method in the installer.
      </para>

      <para>
        During the installation process the installer will create backup files of the installed schema. These files will enable the installer to attempt to alter the database if run again with a different configuration. However if these files exist the installer will always attempt to alter instead of creating the tables from scratch as long as you are using the sam DSN. If for some reason you need to create the tables from scratch again then please delete the backup files with the matching DSN. You can find the installer inside the data directory of your pear install directory. Its called install.php and at the top of the file you will find a number of sample API calls which are commented out.
      </para>

      <para>
        You have to setup some standard tables to be able to use LiveUser.
      </para>
      <para>
        The package has a <classname>LiveUser_Misc_Schema_Install</classname> which can be used to create the database setup correctly.
      </para>
      <para>
        Make sure that you feed the installer with the correct configuration. Below is the minimum requirements.
      </para>
      <para>
        <programlisting><![CDATA[
<?php
/* config.liveuser.php */

$configuration = array(
            'debug' => true,
            'authContainers' => array(
                array(
                    'passwordEncryptionMode'=> 'MD5',
                    'type'         => 'MDB2',
                    'expireTime'   => 3600,
                    'idleTime'     => 1800,
                    'storage' => array(
                        'dsn' => $dsn,
                        'force_seq' => false,
                        'alias' => array(
                            'auth_user_id' => 'auth_user_id',
                            'lastlogin' => 'lastlogin',
                            'is_active' => 'is_active',
                            'owner_user_id' => 'owner_user_id',
                            'owner_group_id' => 'owner_group_id',
                        ),
                        'fields' => array(
                            'auth_user_id' => 'integer',
                            'lastlogin' => 'timestamp',
                            'is_active' => 'boolean',
                            'owner_user_id' => 'integer',
                            'owner_group_id' => 'integer',
                        ),
                        'tables' => array(
                            'users' => array(
                            'fields' => array(
                                'lastlogin' => null,
                                'is_active' => null,
                                'owner_user_id' => null,
                                'owner_group_id' => null,
                                ),
                            ),
                        ),
                    ),
                ),
            ),
            'permContainer'  => array(
                'type'  => 'Complex',
                    'storage' => array(
                        'MDB2' => array(
                            'dsn' => $dsn,
                            'prefix' => 'liveuser_',
                            'force_seq' => false,
                        'fields' => array(
                            'auth_user_id' => 'integer',
                        ),
                    )
                )
            )
        );
?>
        ]]></programlisting>
      </para>
    </section>

    <section id="setting-up-the-configuration">
      <title>Setting up the configuration</title>
      <para>
        LiveUser is very versatile as it makes you either use some standard database tables, or you can use your existing tables for your users. All that is configured in an array.
      </para>
      <para>
        Using the standard tables this is the minimum requirement for the configuration array. As you can see there is quite a lot of stuff here.
      </para>
      <para>
        <programlisting><![CDATA[
<?php
/* auth.php */

$configuration = array(
            'debug' => true,
            'authContainers' => array(
                array(
                    'passwordEncryptionMode'=> 'MD5',
                    'type'         => 'MDB2',
                    'expireTime'   => 3600,
                    'idleTime'     => 1800,
                    'storage' => array(
                        'dsn' => $dsn,
                        'force_seq' => false,
                        'alias' => array(
                            'auth_user_id' => 'auth_user_id',
                            'lastlogin' => 'lastlogin',
                            'is_active' => 'is_active',
                            'owner_user_id' => 'owner_user_id',
                            'owner_group_id' => 'owner_group_id',
                        ),
                        'fields' => array(
                            'auth_user_id' => 'integer',
                            'lastlogin' => 'timestamp',
                            'is_active' => 'boolean',
                            'owner_user_id' => 'integer',
                            'owner_group_id' => 'integer',
                        ),
                        'tables' => array(
                            'users' => array(
                            'fields' => array(
                                'lastlogin' => null,
                                'is_active' => null,
                                'owner_user_id' => null,
                                'owner_group_id' => null,
                                ),
                            ),
                        ),
                    ),
                ),
            ),
            'permContainer'  => array(
                'type'  => 'Complex',
                    'storage' => array(
                        'MDB2' => array(
                            'dsn' => $dsn,
                            'prefix' => 'liveuser_',
                            'force_seq' => false,
                        'fields' => array(
                            'auth_user_id' => 'integer',
                        ),
                    )
                )
            )
        );
?>
        ]]></programlisting>
      </para>

    </section>
  </chapter>

  <chapter id="observers">
    <title>Using observers</title>

    <para>
      When using an authentication and permission management one might need to implement custom functionalities. Since it is impossible to provide all features as built-in Matthias Nothhaft stepped up and implement observers into LiveUser.
    </para>

    <para>
      Observers will be notified about key changes of state in the LiveUser object. Observers make it possible to extend the feature LiveUser provide to implement any scheme you may have.
    </para>

    <para>
      You can use observers to have added security upon login (IP address restrictions), improve the data gathering process (upon login you can save the data) and several other possibilities. There are no limits to what you can do, an observer is a simple class or function which gets notified when an event is triggered.
    </para>

    <section>
      <title>How to use observers?</title>

      <para>
'onLogin'
    successfully logged in
'forceLogin',
    login required -> you could display a login form
'onLogout',
    before logout -> can be used to cleanup own stuff
'postLogout',
    after logout -> e.g. do a redirect to another page
'onIdled',
    maximum idle time is reached
'onExpired'
    authentication session is expired
'onFailedLogin?'
    login failed
'onUnfreeze'
    successfully unfreeze of a previously logged in user
      </para>
    </section>

    <section>
      <title>How to use observers?</title>

      <para>
        An observer will receive a notification object. Using observers is done via a simple call to a public method of the LiveUser class. One method is available to attach observers:
      </para>

      <para>
        $liveuser_object->dispatcher->addObserver expects a PHP callback. That means you may either pass a function name as a string or an array containing an object or class and a method to call.
      </para>

      <para>
        <programlisting><![CDATA[
<?php
/**
 * LiveUser observer example.
 *
 * @access public
 * @param  object receives a notification object, fetch it by reference
 *                to avoid object copies
 * @return void  return is discarded
 */
class LU_Default_observer
{
    /**
     * This method will receive all the events fired
     *
     * @param  object  a Event_Notification object
     * @return void
     */
    function notify(&$notification)
    {
        echo "observer called on event: "
        . $notification->getNotificationName() . " n";
    }
}

// Create new LiveUser (LiveUser) object.
// We´ll only use the auth container, permissions are not used.
$LU  =& LiveUser::factory($liveuserConfig);
$obs = new LU_Default_observer();
$LU->dispatcher->addObserver(array(&$obs, 'notify'));
?>
      ]]></para>
    </section>
    <section>
      <title>How to add new events?</title>
      <para>
        If you write a class which extends LiveUser you can use the following code:
      </para>
      <para>
        <programlisting><![CDATA[
<?php
class MyClass extends LiveUser
{
    function MyClass()
    {
    }

    function customMethod()
    {
        $this->dispatcher->post($this,'onMyCustomEvent');
    }
}
?>
       ]]></para>
    </section>
  </chapter>

  <chapter id="examples">
    <title>Examples</title>

    <para>
      LiveUser also ship with a wide range of examples. These will be installed into the "docs" directory in your PEAR install directory. They try to illustrate various usage scenarios. The database examples come with a schema file please see the demodata.php in the examples root folder of the LiveUser package for details on how to install these schema files from the command line or from a browser. You will once again need MDB2_Schema to be able to install the schema files.
    </para>

    <itemizedlist>
      <listitem><simpara>example1 illustrates using only a single authentication source (in this case XML) with several aliased fields and a custom field.</simpara></listitem>
      <listitem><simpara>example2 illustrates using a single authentication with permissions (in this case XML) with the optional remember me feature and several aliased fields</simpara></listitem>
      <listitem><simpara>example4 illustrates using multiple authentication sources (XML and database) with permissions (database) in a more real world news administration scenario</simpara></listitem>
      <listitem><simpara>example5 illustrates using single authentication sources (database) with permissions (database) in a more real world news administration scenario </simpara></listitem>
    </itemizedlist>
  </chapter>

  <chapter id="references">
    <title>Other references</title>

    <para>
      Roadmap: http://oss.backendmedia.com/LiveUser/Client
    </para>

    <para>
      Step by step guide to LiveUser and the different permission containers: http://www.gvngroup.be/doc/LiveUser/index.php
    </para>
  </chapter>

</book>